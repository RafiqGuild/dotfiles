#!/bin/bash -e

CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
CURRENT_REPO=$(basename -s .git `git config --get remote.origin.url`)

if [ "$1" == "help" ] ||  [ "$1" == "" ]; then
	echo
	echo "  'git feature start name'   Creates a new feature branch from main called name."
	echo "  'git feature dev'          Merges the current branch to dev and pushes."
	echo "  'git feature stage'        Updates your feature branch with changes from main and provides a link to start a PR."
	echo "  'git feature live'         Checks that the current branch has been merged to staging, "
	echo "                             merges staging to main, then main to staging, both via Github API."
	echo "  'git feature finish'       Verifies the current branch is a feature branch, then deletes the current branch locally and remotely."
	echo
	echo "  'git feature reset-dev'    Resets the develop branch to the code that is merged into the 'main' branch."


elif [ "$1" == "start" ] ; then
	git checkout main
	git pull
	git checkout -b $2
	git push --set-upstream origin $2
	echo "The following actions were performed:"
	echo "  $2 was branched from main."
	echo "  $2 was pushed to remote repo."

elif [ "$1" == "dev" ] ; then

	git push
	git checkout develop
	git pull
	git merge --no-edit $CURRENT_BRANCH
	git push
	git checkout $CURRENT_BRANCH
	echo "The following actions were performed:"
	echo "  $CURRENT_BRANCH was merged to branch develop."
	echo "  Branch develop was pushed."
	echo "  Deployment to the dev environment should have automatically started."

elif [ "$1" == "stage" ] ; then
	git push
	git checkout main
	git pull
	git checkout $CURRENT_BRANCH
	git merge --no-edit main
	git push
	echo "The following actions were performed:"
	echo "  Branch main was pulled"
	echo "  main was merged into $CURRENT_BRANCH"
	echo "  $CURRENT_BRANCH was pushed"
	echo
	echo "You must create a pull request into staging from your feature branch:"
	echo "https://github.com/GuildEducationInc/""$CURRENT_REPO""/compare/staging...""$CURRENT_BRANCH"

elif [ "$1" == "live" ] ; then
	if [[ -z "${GITHUB_TOKEN}" ]]; then
		echo "  GITHUB_TOKEN is not set"
		exit 1
	fi

	# Make sure current branch is not develop or main
	if [ $CURRENT_BRANCH == "main" ] ||  [ $CURRENT_BRANCH == "staging" ] || [ $CURRENT_BRANCH == "develop" ] ; then
		echo
		echo "  Current branch ""$CURRENT_BRANCH"" must be a feature branch."
		echo
		exit 1
	fi

	# Make sure current branch has already been merged to stage
	git checkout staging
	git pull
	if git branch --merged | grep "  $CURRENT_BRANCH" ; then
		echo "Using Github API to merge staging to main"
		curl -o /dev/null -H "Authorization: token $GITHUB_TOKEN" -d '{"base": "main", "head": "staging", "commit_message": "Merge staging to main to deploy "}' https://api.github.com/repos/GuildEducationInc/$CURRENT_REPO/merges
		git checkout main
		git pull
		git checkout $CURRENT_BRANCH
		echo "The following actions were performed:"
		echo "  Branch staging was merged to main."
		echo "  Deployment to the production environment should have automatically started."
	else
		echo "Branch $CURRENT_BRANCH not found on staging and can not be promoted"
		git checkout $CURRENT_BRANCH
	fi

elif [ "$1" == "finish" ] ; then
	# Make sure current branch is not develop or main
	if [ $CURRENT_BRANCH == "main" ] ||  [ $CURRENT_BRANCH == "staging" ] || [ $CURRENT_BRANCH == "develop" ] ; then
		echo "Current branch must be a feature branch ""$CURRENT_BRANCH"" can not be deleted!"
		exit 1
	fi

	git push
	git checkout main
	git pull
	git branch -d $CURRENT_BRANCH
	git push origin --delete $CURRENT_BRANCH
	echo "  Local branch $CURRENT_BRANCH was deleted."
	echo "  Remote branch $CURRENT_BRANCH was deleted."
	

elif [ "$1" == "reset-dev" ] ; then
	git push
	git checkout develop
	git pull
	git reset --hard origin/main
	git push --force
	git checkout $CURRENT_BRANCH
	echo "The following actions were performed:"
	echo "  develop was reset to origin main."
	echo "  Branch develop was pushed."
	echo "  Deployment to the dev environment should have automatically started."

# Use this function as a sandbox to experiment with new commands
elif [ "$1" == "test" ] ; then
	git checkout develop
	# Make sure current branch is on stage and is not develop or main
	if [ $CURRENT_BRANCH == "main" ] ||  [ $CURRENT_BRANCH == "staging" ] || [ $CURRENT_BRANCH == "develop" ] ; then
		echo "Current branch must be a feature branch ""$CURRENT_BRANCH"" can not be merged to main and deleted!"
		exit 1
	fi

	if git branch --merged | grep "  $CURRENT_BRANCH" ; then
		echo "found branch"
	else
		echo "not found branch"
	fi

	git checkout $CURRENT_BRANCH
	
fi